#!/usr/bin/env node

'use strict';

var call       = Function.prototype.call
  , keys       = Object.keys
  , fs         = require('fs')
  , resolve    = require('path').resolve
  , commonLeft = require('es5-ext/lib/Array/prototype/common-left')
  , flatten    = require('es5-ext/lib/Array/prototype/flatten')
  , copy       = require('es5-ext/lib/Object/copy')
  , mapKeys    = require('es5-ext/lib/Object/map-keys')
  , extend     = require('es5-ext/lib/Object/extend')
  , deferred   = require('deferred')
  , clc        = require('cli-color')
  , bold       = clc.bold, red = clc.bold.red, green = clc.bold.green
  , reporter   = require("../lib/reporter")
  , lintPaths  = require("../lib/lint-paths")
  , options    = require('../lib/_options-schema')

  , opts = require('optimist').usage("Usage: $0 <options> <paths>...",
		extend(copy(options), {
			color: {
				boolean: true,
				default: true,
				description: "(Non JSLint) Colorize output"
			},
			git: {
				boolean: true,
				description: "(Non JSLint) Obey .gitignore rules "
					+ "(only when called on directory)"
			},
			help: {
				boolean: true,
				desription: "(Non JSLint) Show this help"
			},
			maxerrfiles: {
				default: 5,
				description: "(Non JSLint) Maximum number of files for "
					+ "which warnings are reported"
			},
			nocache: {
				boolean: true,
				description: "(Non JSLint) Whether to cache results (useful when "
					+ "called repeatedly)"
			}
		}))

  , argv = opts.argv
  , paths = argv._;

if (argv.help) {
	console.log(opts.help());
	process.exit(0);
}

delete argv._;
delete argv.$0;

if (!paths.length) {
	paths.push('.');
}

lintPaths(paths, argv)(function (files) {
	var names = keys(files);
	if (!names.length) {
		console.log('Found no files to lint');
		return 0;
	}
	if ((paths.length === 1) && (names.length === 1)) {
		reporter(names[0], files[names[0]]);
		return files[names[0]].errors ? 1 : 0;
	}

	names = names.filter(function (name) {
		return files[name].errors;
	});
	if (names.length) {
		names.slice(0, argv.maxerrfiles).forEach(function (filename) {
			reporter(filename, files[filename]);
		});
		if (names.length > argv.maxerrfiles) {
			console.log(red("... and more errors in " +
				(names.length - argv.maxerrfiles) + " files.\n"));
		}
		return 1;
	} else {
		console.log(bold("All is") + " " + green("OK"));
		return 0;
	}
}).end(function (code) {
	process.on('exit', function () {
		process.exit(code);
	});
}, null);
